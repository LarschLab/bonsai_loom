<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q4="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q6="clr-namespace:Bonsai.PointGrey;assembly=Bonsai.PointGrey" xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:ImageWriter">
          <q1:Path>\\.\pipe\p1</q1:Path>
          <q1:Suffix>None</q1:Suffix>
          <q1:Overwrite>false</q1:Overwrite>
        </Combinator>
      </Expression>
      <Expression xsi:type="PublishSubject">
        <Name>trackOut</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:DrawArrays">
          <q2:ShaderName>Particles</q2:ShaderName>
          <q2:DrawMode>Points</q2:DrawMode>
          <q2:Usage>DynamicDraw</q2:Usage>
          <q2:VertexAttributes>
            <q2:VertexAttributeMapping>
              <q2:Size>3</q2:Size>
              <q2:Normalized>false</q2:Normalized>
              <q2:Type>Float</q2:Type>
            </q2:VertexAttributeMapping>
          </q2:VertexAttributes>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:TextWriter">
          <q3:FileName>E:\00_bonsai_ffmpeg_out\PositionTxt_allROI.txt</q3:FileName>
          <q3:Suffix>Timestamp</q3:Suffix>
          <q3:Buffered>true</q3:Buffered>
          <q3:Overwrite>false</q3:Overwrite>
          <q3:Append>false</q3:Append>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ffmpeg</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q4:PythonSource">
              <q4:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>30</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item5)
  vid_height=str(inputs.Item6)
  vid_rate=str(inputs.Item1)
  currentTime=inputs.Item2
  cam_id=str(inputs.Item3)
  codec_q=str(inputs.Item4)

  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid e:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'
  sp.Popen(cmd)
  return True</q4:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>codec q</Name>
              <Value>5</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>cam id</Name>
              <Value>0</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>vid fps</Name>
              <Value>30</Value>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Width</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Height</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>1</Count>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source5</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>2</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>2</To>
              <Label>Source6</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>2</To>
              <Label>Source7</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="NestedWorkflow">
              <Name>findFish</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="ToList" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:LargestBinaryRegion" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:BinaryRegionAnalysis" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:FindContours">
                      <q1:Mode>External</q1:Mode>
                      <q1:Method>ChainApproxNone</q1:Method>
                      <q1:Offset>
                        <q1:X>0</q1:X>
                        <q1:Y>0</q1:Y>
                      </q1:Offset>
                      <q1:MinArea>5</q1:MinArea>
                      <q1:MaxArea>5000</q1:MaxArea>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:Crop">
                      <q1:RegionOfInterest>
                        <q1:X>1072</q1:X>
                        <q1:Y>1078</q1:Y>
                        <q1:Width>910</q1:Width>
                        <q1:Height>910</q1:Height>
                      </q1:RegionOfInterest>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="InputMapping">
                    <PropertyMappings>
                      <Property name="RegionOfInterest" selector="Source.Item2.Item1,Source.Item2.Item2,Source.Item2.Item3,Source.Item2.Item3" />
                    </PropertyMappings>
                    <Selector>Source.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q5:HeadingFromOrientation" />
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>7</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>1</From>
                    <To>8</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>4</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>5</From>
                    <To>4</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>6</From>
                    <To>5</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>8</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>3</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>3</To>
              <Label>Source4</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>flyVideo</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Threshold">
                <q1:ThresholdValue>15</q1:ThresholdValue>
                <q1:MaxValue>255</q1:MaxValue>
                <q1:ThresholdType>Binary</q1:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:BackgroundSubtraction">
                <q1:BackgroundFrames>120</q1:BackgroundFrames>
                <q1:AdaptationRate>0.0001</q1:AdaptationRate>
                <q1:ThresholdValue>0</q1:ThresholdValue>
                <q1:ThresholdType>ToZero</q1:ThresholdType>
                <q1:SubtractionMethod>Dark</q1:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Image</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:FlyCapture">
                <q6:Index>0</q6:Index>
                <q6:ColorFormat>Bgr</q6:ColorFormat>
                <q6:ColorProcessing>Default</q6:ColorProcessing>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ToList" />
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Name>split_hMat</q4:Name>
        <q4:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</q4:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:UpdateFrame" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="q3:CsvReader">
        <q3:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2017-04-06T11_52_45.csv</q3:FileName>
        <q3:ScanPattern>%i %i %i %i %i %i</q3:ScanPattern>
        <q3:SkipRows>0</q3:SkipRows>
      </Expression>
      <Expression xsi:type="q3:CsvReader">
        <q3:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut2017-04-06T13_40_17.csv</q3:FileName>
        <q3:ScanPattern>%s</q3:ScanPattern>
        <q3:SkipRows>0</q3:SkipRows>
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math
import traceback

color = Scalar.Rgb(250,250,250)
generator = Random()
xMax=2048.0 #relevant for openGL scaling
yMax=1280.0
maxSize=20
minSize=0
frCount=0
groupCount=0
endDist = 0.
startDist=300.
size=5
sizeScale=1
pointPathAll=[]
speed=2 #px/fr
ar=Array[Vector3]([Vector3(0.,0.,1)])
groupSize=9
groupGap=30*15
dotGap=1
gapFrames=dotGap
stimDir=math.pi/2.
stimDirOff=-math.pi/3.
#angleOffset=math.pi/4.


def random(generator,minval,maxval):
  return int(round(generator.NextDouble() * (maxval - minval) + minval))

def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

@returns(Tuple[Array[Vector3],str])
def process(value):
  global frCount,pointPathAll, size,ar,groupCount,gapFrames,stimDir,stimDirOff

  pathLen=startDist-endDist
  pl=int(pathLen/speed)

  #imgIn=value.Item4
  #im = imgIn.Clone()
  #CV.Copy(img,imgIn)



  cAll=[]
  headingAll=[]
  for a in range(value.Item1.Count):
    c=value.Item1[a].Centroid
    heading=value.Item1[a].Orientation
    cAll.append(c)
    headingAll.append(heading)

  try:

    if frCount==0:
      pointPathAll=[]

      if groupCount==0:
        size=random(generator,minSize,maxSize)*sizeScale

      if groupCount&lt;groupSize:
        gapFrames=dotGap
        groupCount+=1
      else:
        gapFrames=groupGap
        groupCount=0
      

      #headingStart=[]
      cStart=[]
      stimDir=-1*stimDir
      stimDirOff=-1*stimDirOff

      for a in range(value.Item1.Count):
      
        c=cAll[a]
        heading=headingAll[a]+stimDirOff
        
        #headingStart.append(heading)
        cStart.append(c)
        
        distance=startDist*0.5
        rise = math.sin(heading)*distance
        run = math.cos(heading)*distance

        x=c.X+run
        y=c.Y+rise

        heading=headingAll[a]+stimDir
        pointPath=[]
        for i in range(pl):
          distance=startDist-i*speed
          rise = math.sin(heading)*distance
          run = math.cos(heading)*distance
          pointPath.append(Point(x+run,y+rise))
        pointPathAll.append(pointPath)


    #CV.Circle(img,Point(c),20,color,2)
    
    if frCount &lt; pl+gapFrames:
      frCount+=1
      if frCount&lt;pl:
        drawAll=[]
        wellstr=[]
        for a in range(value.Item1.Count):

          pointPath=pointPathAll[a]

          p=pointPath[frCount]
          xp=p.X
          yp=p.Y
          c=cAll[a]
          heading=headingAll[a]
          x=c.X
          y=c.Y

          #if math.isnan(x):
          #  wellstr.append("NaN NaN NaN NaN NaN NaN" )
          #else:
          welldata=(x,y,heading,xp,yp,size)
          wellstr.append("%i %i %0.3f %i %i %i" % welldata)
            #wellstr.append("NaN NaN NaN NaN NaN NaN" )
          
          #CV.Circle(im,p,size,color,-1)
          

          xoff=value.Item2[a].Item1
          yoff=value.Item2[a].Item2
          xx=xp+xoff
          yy=yp+yoff

          hArr =value.Item3 #projector-camera calibration matrix

          if math.isnan(xx):
            xx,yy=0,0
          else:
            xx,yy=transf(xx,yy,hArr) ##projector-camera calibration

          drawAll.append([xx,yy])
        ar=Array[Vector3]([Vector3(2*(xy[0]-xMax/2)/xMax,-2*(xy[1]-yMax/2)/yMax,size) for xy in drawAll])
        st=" ".join(wellstr)
      else:
        ar=Array[Vector3]([Vector3(2*(10-xMax/2)/xMax,-2*(10-yMax/2)/yMax,1)])
        st='gap'
    else:
      frCount=0
      ar=Array[Vector3]([Vector3(2*(10-xMax/2)/xMax,-2*(10-yMax/2)/yMax,1)])
      st='gap'

      #img = IplImage(Size(500,500), img.Depth, 3)
  except:
    #img = IplImage(Size(500,500), img.Depth, 3)
    print traceback.format_exc()
    ar=Array[Vector3]([Vector3(2*(10-xMax/2)/xMax,-2*(10-yMax/2)/yMax,1)])
    st='none'
  #CV.Circle(im,Point(50,50),10,color,-1)
  return Tuple.Create(ar,st)

def unload():
  global frCount,pointPath
  frCount=None
  pointPath=None
  ar=None
  size=None</q4:Script>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>trackOut</Name>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>4</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>8</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>8</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>9</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawArrays, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonSource, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.ToList, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.PointGrey.FlyCapture, Bonsai.PointGrey, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>