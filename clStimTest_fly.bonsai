<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q4="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q6="clr-namespace:Bonsai.PointGrey;assembly=Bonsai.PointGrey" xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:ImageWriter">
          <q1:Path>\\.\pipe\p1</q1:Path>
          <q1:Suffix>None</q1:Suffix>
          <q1:Overwrite>false</q1:Overwrite>
        </Combinator>
      </Expression>
      <Expression xsi:type="PublishSubject">
        <Name>trackOut</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:DrawArrays">
          <q2:ShaderName>Particles</q2:ShaderName>
          <q2:DrawMode>Points</q2:DrawMode>
          <q2:Usage>DynamicDraw</q2:Usage>
          <q2:VertexAttributes>
            <q2:VertexAttributeMapping>
              <q2:Size>3</q2:Size>
              <q2:Normalized>false</q2:Normalized>
              <q2:Type>Float</q2:Type>
            </q2:VertexAttributeMapping>
          </q2:VertexAttributes>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:TextWriter">
          <q3:FileName>E:\00_bonsai_ffmpeg_out\PositionTxt_allROI.txt</q3:FileName>
          <q3:Suffix>Timestamp</q3:Suffix>
          <q3:Buffered>true</q3:Buffered>
          <q3:Overwrite>false</q3:Overwrite>
          <q3:Append>false</q3:Append>
        </Combinator>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ffmpeg</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q4:PythonSource">
              <q4:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</q4:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>30</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q4:PythonTransform">
              <q4:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item5)
  vid_height=str(inputs.Item6)
  vid_rate=str(inputs.Item1)
  currentTime=inputs.Item2
  cam_id=str(inputs.Item3)
  codec_q=str(inputs.Item4)

  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt gray -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid e:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'
  sp.Popen(cmd)
  return True</q4:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>codec q</Name>
              <Value>5</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>cam id</Name>
              <Value>0</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>vid fps</Name>
              <Value>30</Value>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Width</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Height</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>1</Count>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source5</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>2</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>2</To>
              <Label>Source6</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>2</To>
              <Label>Source7</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item3</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="NestedWorkflow">
              <Name>findFish</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="ToList" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:LargestBinaryRegion" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:BinaryRegionAnalysis" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:FindContours">
                      <q1:Mode>External</q1:Mode>
                      <q1:Method>ChainApproxNone</q1:Method>
                      <q1:Offset>
                        <q1:X>0</q1:X>
                        <q1:Y>0</q1:Y>
                      </q1:Offset>
                      <q1:MinArea>5</q1:MinArea>
                      <q1:MaxArea>5000</q1:MaxArea>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:Crop">
                      <q1:RegionOfInterest>
                        <q1:X>1024</q1:X>
                        <q1:Y>1030</q1:Y>
                        <q1:Width>946</q1:Width>
                        <q1:Height>946</q1:Height>
                      </q1:RegionOfInterest>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="InputMapping">
                    <PropertyMappings>
                      <Property name="RegionOfInterest" selector="Source.Item2.Item1,Source.Item2.Item2,Source.Item2.Item3,Source.Item2.Item3" />
                    </PropertyMappings>
                    <Selector>Source.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q5:HeadingFromOrientation" />
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>7</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>1</From>
                    <To>8</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>4</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>5</From>
                    <To>4</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>6</From>
                    <To>5</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>8</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>3</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>3</To>
              <Label>Source4</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>flyVideo</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Threshold">
                <q1:ThresholdValue>15</q1:ThresholdValue>
                <q1:MaxValue>255</q1:MaxValue>
                <q1:ThresholdType>Binary</q1:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:BackgroundSubtraction">
                <q1:BackgroundFrames>120</q1:BackgroundFrames>
                <q1:AdaptationRate>0.0001</q1:AdaptationRate>
                <q1:ThresholdValue>0</q1:ThresholdValue>
                <q1:ThresholdType>ToZero</q1:ThresholdType>
                <q1:SubtractionMethod>Dark</q1:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Image</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q6:FlyCapture">
                <q6:Index>0</q6:Index>
                <q6:ColorFormat>Bgr</q6:ColorFormat>
                <q6:ColorProcessing>Default</q6:ColorProcessing>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ToList" />
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Name>split_hMat</q4:Name>
        <q4:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</q4:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:UpdateFrame" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="q3:CsvReader">
        <q3:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2017-04-18T11_46_03.csv</q3:FileName>
        <q3:ScanPattern>%i %i %i %i %i %i</q3:ScanPattern>
        <q3:SkipRows>0</q3:SkipRows>
      </Expression>
      <Expression xsi:type="q3:CsvReader">
        <q3:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut2017-04-18T12_57_22.csv</q3:FileName>
        <q3:ScanPattern>%s</q3:ScanPattern>
        <q3:SkipRows>0</q3:SkipRows>
      </Expression>
      <Expression xsi:type="q4:PythonTransform">
        <q4:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3,Vector4
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math
import traceback

generator = Random()


#sizeList=[0,1,2,3,4,6,8,14,20,30,0,1,2]
sizeList=[0,1,2] # (px) List of dot sizes. Randomly sampled during experiment. Absolute size depends on projector

speed=3 #px/frame

stimDirOff=-math.pi/4. #direction relative to animal heading where dot first appears. Used together with startDist to determine location of dot start.
stimDir=math.pi/2. #direction of dot movement away from dot start. Direction is relative to animal heading. pi/2 = perpendicular

startDist=200. # (px) how far away from centroid dot first appears.
endDist = 0. # (px) how far dot approaches

groupSize=10 # number of times to repeat same dot size from sizeList
groupGap=30*10 # (frames) delay before switching to a new size from sizeList
dotGap=30*5 # (frames) delay between dots of the same size

DotColor = Vector4(0,0,0,1)
DotColor = Vector4(0,0,0,1)

#define variables
frCount=0 #counter for frames since dot presentation
groupCount=0 #counter for presentations of same dot size
size=0 #initial dot size set to 0
pointPathAll=[] #stores dot paths
ar=Array[Vector3]([Vector3(0.,0.,0)]) # stores (x,y,size) array for openGL sprite drawing
gapFrames=dotGap # number of frames before next dot. Automatically set to groupGap or dotGap during experiment.

# random number generator between min and max
def random(generator,minval,maxval):
  return int(round(generator.NextDouble() * (maxval - minval) + minval))

# perspective transformation using calibration matrix to match camera and projector coordinates
def transf(x,y,h):

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y


@returns(Tuple[Array[Vector3],str,Vector4])
def process(value):
  global frCount,pointPathAll,size,ar,groupCount,stimDir,stimDirOff,gapFrames,DotColor

  xMax=value.Item4.Width #2048.0 #relevant for openGL scaling
  yMax=value.Item4.Height #1280.0

  DotPathLength=int((startDist-endDist)/speed) # number of frames dot is visible
  DotPathLength=2*DotPathLength # for perpendicular stimulus, move dot past animal

  hArr =value.Item3 #projector-camera calibration matrix
  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  cAll=[] #[(x,y)]: list of centroids (one for each tracked animal)
  headingAll=[] # list of animal headings

  #collect animal centroids and headings
  for a in range(value.Item1.Count): #loop over animals
    c=value.Item1[a].Centroid
    heading=value.Item1[a].Orientation
    cAll.append(c)
    headingAll.append(heading)

  try: #big loop to process for each frame

    if frCount==0: #begin presentation of a new dot

      #pre-calculate dot paths for all animals
      #(dot paths are not updates as the animal moves)

      pointPathAll=[]

      if groupCount==0: #start of a new group: randomly select new dot size from list
        sizeInd=random(generator,0,len(sizeList))
        size=sizeList[sizeInd]
      if groupCount&lt;groupSize -1:
        gapFrames=dotGap # use dotGap delay before next dot
        groupCount+=1
      else:
        gapFrames=groupGap # use groupGap delay before next dot
        groupCount=0 # reset groupCount
      

      # invert direction of stimulus movement and stimulus start location to alternate left and right side
      stimDir=-1*stimDir 
      stimDirOff=-1*stimDirOff

      
      for a in range(value.Item1.Count): #loop over animals
      
        #for each arena, test if animal was found and then generate dot path

        c=cAll[a]
        if math.isnan(headingAll[a]): #generate empty path if no animal found
          for i in range(DotPathLength):
            pointPath.append(Point(0,0))

        else: #actual dot path calculation:

          #find dot start point
          heading=headingAll[a]+stimDirOff #start point direction
          distance=startDist*0.5 # distance to dot start point (reduced for shifted placement)
          rise = math.sin(heading)*distance
          run = math.cos(heading)*distance
          x=c.X+run
          y=c.Y+rise

          #dot positions after start point
          heading=headingAll[a]+stimDir #e.g. perpendicular to animal
          pointPath=[]
          for i in range(DotPathLength):
            distance=startDist-i*speed
            rise = math.sin(heading)*distance
            run = math.cos(heading)*distance
            pointPath.append(Point(x+run,y+rise))
        pointPathAll.append(pointPath)




    # in each frame, decide if dot should draw

    if frCount &lt; DotPathLength+gapFrames: # outer loop for each dot presentation
      
      frCount+=1
      if frCount&lt;DotPathLength: # still have dot path to show

        drawAll=[] #list of all dot coordinates
        wellstr=[] #string output of animal and dot data for file output

        for a in range(value.Item1.Count): #loop over animals

          pointPath=pointPathAll[a] #get entire current dot path (this allows to draw multiple dots from same path)
          p=pointPath[frCount] #get current frame
          xp=p.X #point
          yp=p.Y #point
          c=cAll[a] #get current centroid
          heading=headingAll[a]
          x=c.X #animal
          y=c.Y #animal

          #concatenate animal and dot data into string (data are in arena reference coordinates).

          #if no animal was found, x=NaN --&gt; output NaN for this animal
          if math.isnan(x):
            wellstr.append("NaN NaN NaN NaN NaN %i" % size)
          else:
            welldata=(x,y,heading,xp,yp,size) 
            wellstr.append("%i %i %0.3f %i %i %i" % welldata)

          #add arena offset to point coordinates for display
          xoff=value.Item2[a].Item1
          yoff=value.Item2[a].Item2
          xx=xp+xoff
          yy=yp+yoff

          if math.isnan(xx):
            xx,yy=0,0
            drawAll.append([xx,yy])
          else:
            
            for i in range(1): #can show multiple dots from the same path 'like a string of pearls'
              spa=10# len(pointPath)/5  #spacing between points
              #pf=(frCount+spa*i) % len(pointPath)
              pf = min([len(pointPath),frCount+spa*i]) #don't go beyond list index
              p=pointPath[pf]
              #r=random(generator,1,5)
              xp=p.X#+r
              yp=p.Y#+r
              xx=xp+xoff
              yy=yp+yoff
              xx,yy=transf(xx,yy,h) ##projector-camera calibration
              drawAll.append([xx,yy])

        #build dot array and output string from all animals
        ar=Array[Vector3]([Vector3(2*(xy[0]-xMax/2)/xMax,-2*(xy[1]-yMax/2)/yMax,size) for xy in drawAll])
        st=" ".join(wellstr)

      else: #no drawing array between dot presentations
        ar=Array[Vector3]([Vector3(0.,0.,0)])
        st='gap'
    else:
      frCount=0
      ar=Array[Vector3]([Vector3(0.,0.,0)])
      st='gap'


  except:

    print traceback.format_exc()
    ar=Array[Vector3]([Vector3(0.,0.,0)])
    st='none'

  return Tuple.Create(ar,st,DotColor)

def unload():
  global frCount,pointPathAll, size,ar,groupCount,stimDir,stimDirOff,gapFrames
  frCount=None
  pointPathAll=None
  ar=None
  size=None
  groupCount=None
  stimDir=None
  stimDirOff=None
  gapFrames=None

</q4:Script>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>trackOut</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:UpdateUniform">
          <q2:UniformName>color</q2:UniformName>
          <q2:ShaderName>Particles</q2:ShaderName>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item3</Selector>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>4</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>8</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>8</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>9</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawArrays, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonSource, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.ToList, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.PointGrey.FlyCapture, Bonsai.PointGrey, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateUniform, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>