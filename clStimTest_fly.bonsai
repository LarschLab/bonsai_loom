<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns:q4="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q6="clr-namespace:Bonsai.PointGrey;assembly=Bonsai.PointGrey" xmlns:q1="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="q1:CsvReader">
        <q1:FileName>E:\00_bonsai_ffmpeg_out\calibrationOut2017-04-03T15_00_05.csv</q1:FileName>
        <q1:ScanPattern>%s</q1:ScanPattern>
        <q1:SkipRows>0</q1:SkipRows>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

color = Scalar.Rgb(250,250,250)
generator = Random()
xMax=2048.0 #relevant for openGL scaling
yMax=1280.0
maxSize=15
minSize=0
frCount=0
endDist = 0.
startDist=300.
size=5
pointPath=[]
speed=5 #px/fr
gapFrames=30*5
ar=Array[Vector3]([Vector3(0.,0.,1)])
#angleOffset=math.pi/4.

def random(generator,minval,maxval):
  return generator.NextDouble() * (maxval - minval) + minval

def transf(x,y,hArr):

  h = Mat.FromArray(hArr, 3, 3, Depth.F64, 1)

  values1 = Array[float]([x,y])
  values2 = Array[float]([1,1])

  point = Mat.FromArray(values1, 1, 1, Depth.F64,2)
  out = Mat.FromArray(values2, 1, 1, Depth.F64,2)

  CV.PerspectiveTransform(point,out,h)

  x=out.Item[0].Val0
  y=out.Item[0].Val1

  return x,y

@returns(Tuple[IplImage,Array[Vector3],str])
def process(value):
  global frCount,pointPath, size,ar

  imgIn=value.Item1.Item2
  im = imgIn.Clone()
  #CV.Copy(img,imgIn)

  xoff=value.Item1.Item3.Item1
  yoff=value.Item1.Item3.Item2

  c=value.Item1.Item1.Centroid
  heading=value.Item1.Item1.Orientation
  x=c.X
  y=c.Y

  try:
    if frCount==0:
      pointPath=[]
      size=random(generator,minSize,maxSize)
      pathLen=startDist-endDist
      for i in range(int(pathLen/speed)):
        distance=startDist-i*speed
        rise = math.sin(heading)*distance
        run = math.cos(heading)*distance
        pointPath.append(Point(x+run,y+rise))


    #CV.Circle(img,Point(c),20,color,2)
    
    if frCount &lt; len(pointPath)+gapFrames:
      frCount+=1
      if frCount&lt;len(pointPath):

        p=Point(pointPath[frCount].X,pointPath[frCount].Y)
        CV.Circle(im,p,size,color,-1)

        xp=pointPath[frCount].X
        yp=pointPath[frCount].Y
        xx=xp+xoff
        yy=yp+yoff
        welldata=(x,y,heading,xp,yp,size)
        wellstr = "%i %i %0.3f %i %i %i" % welldata
        st=" ".join(wellstr)

        hArr =value.Item2 #projector-camera calibration matrix
        xx,yy=transf(xx,yy,hArr) ##projector-camera calibration
        ar=Array[Vector3]([Vector3(2*(xx-xMax/2)/xMax,-2*(yy-yMax/2)/yMax,size)])

      else:
        xx=pointPath[-1].X+xoff
        yy=pointPath[-1].Y+yoff
        ar=Array[Vector3]([Vector3(2*(xx-xMax/2)/xMax,-2*(yy-yMax/2)/yMax,1)])
        st='gap'
    else:
      frCount=0
      xx=pointPath[-1].X+xoff
      yy=pointPath[-1].Y+yoff
      ar=Array[Vector3]([Vector3(2*(xx-xMax/2)/xMax,-2*(yy-yMax/2)/yMax,1)])
      st='gap'

      #img = IplImage(Size(500,500), img.Depth, 3)
  except:
    #img = IplImage(Size(500,500), img.Depth, 3)

    ar=Array[Vector3]([Vector3(2*(10-xMax/2)/xMax,-2*(10-yMax/2)/yMax,1)])
    st='none'
  #CV.Circle(im,Point(50,50),10,color,-1)
  return Tuple.Create(im,ar,st)

def unload():
  global frCount,pointPath
  frCount=None
  pointPath=None
  ar=None
  size=None</q2:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Image</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:BackgroundSubtraction">
          <q3:BackgroundFrames>120</q3:BackgroundFrames>
          <q3:AdaptationRate>0.0001</q3:AdaptationRate>
          <q3:ThresholdValue>0</q3:ThresholdValue>
          <q3:ThresholdType>ToZero</q3:ThresholdType>
          <q3:SubtractionMethod>Dark</q3:SubtractionMethod>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item3</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="q1:CsvReader">
        <q1:FileName>E:\00_bonsai_ffmpeg_out\ROIdef2017-04-03T14_39_08_sel.txt</q1:FileName>
        <q1:ScanPattern>%i %i %i %i %i %i</q1:ScanPattern>
        <q1:SkipRows>0</q1:SkipRows>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="ToList" />
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Name>split_hMat</q2:Name>
        <q2:Script>from System import Array
@returns(Array)
def process(value):
  return Array[float]([float(el) for el in value.split()])</q2:Script>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q4:HeadingFromOrientation" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FindContours">
                <q3:Mode>External</q3:Mode>
                <q3:Method>ChainApproxNone</q3:Method>
                <q3:Offset>
                  <q3:X>0</q3:X>
                  <q3:Y>0</q3:Y>
                </q3:Offset>
                <q3:MinArea>5</q3:MinArea>
                <q3:MaxArea>500</q3:MaxArea>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Threshold">
                <q3:ThresholdValue>15</q3:ThresholdValue>
                <q3:MaxValue>255</q3:MaxValue>
                <q3:ThresholdType>Binary</q3:ThresholdType>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Crop">
                <q3:RegionOfInterest>
                  <q3:X>89</q3:X>
                  <q3:Y>1061</q3:Y>
                  <q3:Width>908</q3:Width>
                  <q3:Height>908</q3:Height>
                </q3:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="InputMapping">
              <PropertyMappings>
                <Property name="RegionOfInterest" selector="Source.Item2.Item1,Source.Item2.Item2,Source.Item2.Item3,Source.Item2.Item3" />
              </PropertyMappings>
              <Selector>Source.Item1</Selector>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>0</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>0</To>
              <Label>Source3</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q5:DrawArrays">
          <q5:ShaderName>Particles</q5:ShaderName>
          <q5:DrawMode>Points</q5:DrawMode>
          <q5:Usage>DynamicDraw</q5:Usage>
          <q5:VertexAttributes>
            <q5:VertexAttributeMapping>
              <q5:Size>3</q5:Size>
              <q5:Normalized>false</q5:Normalized>
              <q5:Type>Float</q5:Type>
            </q5:VertexAttributeMapping>
          </q5:VertexAttributes>
        </Combinator>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q5:UpdateFrame" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="NestedWorkflow">
        <Name>ffmpeg</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="q2:PythonSource">
              <q2:Script>import datetime
@returns(str)
def generate():
  currentTime=datetime.datetime.now()
  yield currentTime.strftime('%Y%m%d%H%M%S')</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>30</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Script>import subprocess as sp
import datetime

@returns(bool)
def process(inputs):

  vid_width=str(inputs.Item5)
  vid_height=str(inputs.Item6)
  vid_rate=str(inputs.Item1)
  currentTime=inputs.Item2
  cam_id=str(inputs.Item3)
  codec_q=str(inputs.Item4)

  cmd='c:\\ffmpeg\\bin\\ffmpeg.exe -y -f rawvideo -vcodec rawvideo -s '+vid_width+'x'+vid_height+' -r '+vid_rate+' -pix_fmt bgr24 -i \\\\.\\pipe\\p1 -q:v '+codec_q+' -vcodec mpeg4 -vtag xvid e:\\00_bonsai_ffmpeg_out\\out_id'+cam_id+'_'+vid_rate+'fps'+'_'+currentTime+'.avi'
  sp.Popen(cmd)
  return True</q2:Script>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>5</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="IntProperty">
                <Value>0</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>codec q</Name>
              <Value>5</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>cam id</Name>
              <Value>0</Value>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32IntProperty">
              <MemberName>Value</MemberName>
              <Name>vid fps</Name>
              <Value>30</Value>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Width</Selector>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Height</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source5</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>2</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>2</To>
              <Label>Source6</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>2</To>
              <Label>Source7</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:ImageWriter">
          <q3:Path>\\.\pipe\p1</q3:Path>
          <q3:Suffix>None</q3:Suffix>
          <q3:Overwrite>false</q3:Overwrite>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Depth</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:ConvertColor">
          <q3:Conversion>Gray2Bgr</q3:Conversion>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:FlyCapture">
          <q6:Index>0</q6:Index>
          <q6:ColorFormat>Bgr</q6:ColorFormat>
          <q6:ColorProcessing>Default</q6:ColorProcessing>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>25</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>6</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>7</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>24</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>22</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>22</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>15</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>17</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>23</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>26</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.IO.CsvReader, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.ToList, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.InputMappingBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.DrawArrays, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.16.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonSource, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ImageWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ConvertColor, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.PointGrey.FlyCapture, Bonsai.PointGrey, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>