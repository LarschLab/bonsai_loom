<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q3="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q2="clr-namespace:Bonsai.joh.Vision;assembly=BonsaiPackage5" xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FileCapture">
          <q1:FileName>D:\data\b\2017\20170330_SizeVar\out_id0_30fps_20170330111849.avi</q1:FileName>
          <q1:PlaybackRate>60</q1:PlaybackRate>
          <q1:StartPosition>1000</q1:StartPosition>
          <q1:PositionUnits>Frames</q1:PositionUnits>
          <q1:Loop>false</q1:Loop>
          <q1:Playing>true</q1:Playing>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Crop">
          <q1:RegionOfInterest>
            <q1:X>418</q1:X>
            <q1:Y>414</q1:Y>
            <q1:Width>444</q1:Width>
            <q1:Height>423</q1:Height>
          </q1:RegionOfInterest>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Threshold">
          <q1:ThresholdValue>15</q1:ThresholdValue>
          <q1:MaxValue>255</q1:MaxValue>
          <q1:ThresholdType>Binary</q1:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>External</q1:Mode>
          <q1:Method>ChainApproxNone</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea>5</q1:MinArea>
          <q1:MaxArea>500</q1:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:HeadingFromOrientation" />
      </Expression>
      <Expression xsi:type="q3:PythonTransform">
        <q3:Script>import clr
clr.AddReference("OpenTK")
from OpenTK import Vector2, Vector3
from System import Array, Single, Random,Tuple
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
import math

color = Scalar.Rgb(255,255,255)

frCount=0
endDist = 0
startDist=40
size=5
pointPath=[]
#angleOffset=math.pi/4.

@returns(IplImage)
def process(value):
  global frCount,pointPath
  img=value.Item2
  c=value.Item1.Centroid
  heading=value.Item1.Orientation
  x=c.X
  y=c.Y

  if frCount==0:
    pointPath=[]
    pathLen=startDist-endDist
    for i in range(pathLen):
      distance=startDist-i
      rise = math.sin(heading)*distance
      run = math.cos(heading)*distance
      pointPath.append(Point(x+run,y+rise))


  #CV.Circle(img,Point(c),20,color,2)
  
  
  if frCount &lt; 50:
    frCount+=1
    if frCount&lt;len(pointPath):
      CV.Circle(img,pointPath[frCount],size,color,-1)
  else:
    frCount=0


  return img

def unload():
  global frCount,pointPath
  frCount=None
  pointPath=None</q3:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>9</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.joh.Vision.HeadingFromOrientation, BonsaiPackage5, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>